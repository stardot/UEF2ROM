.org $8000
.alias current_paged_rom $f4
.alias current_rom $f5
.alias exported_rom_pointer $f6
.alias exported_rom_pointer_low $f6
.alias exported_rom_pointer_high $f7
.alias OSRDRM $ffb9
.alias rom_pointer $%(rom pointer)x
.alias rom_bank $%(rom bank)x

rom_start:
.byte 0, 0, 0   ; null language entry
jmp service_entry

; ROM type
.byte $82       ; 6502 code (2), language ($40), service ($80)

copyright_offset:
.byte [copyright_string - rom_start - 1]

; Version
.byte %(version)i

; Title string
.byte "%(title)s", 0

; Version string
.byte "%(version string)s", 0

copyright_string:
.byte "%(copyright)s", 0

service_entry:

    cmp #$0d
    beq init_command
    cmp #$0e
    beq read_byte_command

%(service boot code)s

    service_entry_exit:
    rts

init_command:

    pha
    tya
    bmi init_set_pointer
    eor #$0f
    cmp #$10
    bcs exit
    cmp current_paged_rom
    bcc exit

    init_set_pointer:
%(second rom bank check code)s
%(second rom bank init code)s

    lda #<data
    sta exported_rom_pointer
    lda #>data
    sta [exported_rom_pointer + 1]

    init_store_rom_number:
    lda current_paged_rom
    eor #$0f
    sta current_rom

claim:
    pla
    lda #0
    rts

exit:
    pla
    rts

read_byte_command:
    pha
    tya
    bmi os120

    lda current_rom
    eor #$0f
    cmp current_paged_rom
    bne exit

%(trigger check)s
    ldy #0
    lda (exported_rom_pointer),y
    tay

claim1:
    inc exported_rom_pointer
    bne claim1_sync
    inc [exported_rom_pointer + 1]

    claim1_sync:
%(second rom bank pointer sync code)s

    jmp claim

os120:
    lda current_rom
    eor #$0f
    tay
    jsr OSRDRM
    tay
    jmp claim1

rom_command:

%(init romfs code)s
%(boot code)s

; Optionally include code to check for certain ROM addresses and trigger actions.
%(trigger routine)s

; Optionally include code to perform decompression of compressed data.
%(decode code)s

data:
