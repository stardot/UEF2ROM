trigger_check:

    ; The following check was obtained from
    ; http://mdfs.net/Info/Comp/BBC/SROMs/FastROMFS

    lda $e2                         ; If cataloguing, exit instead of checking
    and #$08                        ; for triggers.
    bne trigger_check_quick_exit

    ; Compare the exported ROM pointer to the triggers.

    txa         ; Save X for later.
    pha

    ldx #after_triggers ; Set X to refer to the address after the trigger array.

    trigger_check_loop:

        dex
        lda triggers,x                  ; Compare the high byte of the ROM
        cmp exported_rom_pointer_high   ; pointer to the current trigger.
        bne trigger_check_next

        dex
        lda triggers,x                  ; Compare the low byte of the ROM
        cmp exported_rom_pointer_low    ; pointer to the current trigger.
        bne trigger_check_base

        ; Compare the file name being searched for with the one in the block
        ; just loaded. If the search file name is just a null byte then go ahead
        ; and decompress the data anyway.
        lda $3d2
        beq trigger_start_decompression

        txa
        pha

        ldx #0
        trigger_check_file_name_loop:
            lda $3b2,x
            sta trigger_offset  ; Store the original char in an unused location.
            cmp #$61
            bcc trigger_check_file_name_check_case  ; < 'a'
            cmp #$7b
            bcs trigger_check_file_name_check_case  ; > 'z'

            and #$df            ; Convert the char to upper case and store it
            sta trigger_offset  ; in a location that isn't being used.

            trigger_check_file_name_check_case:
            lda $3d2,x
            cmp #$61
            bcc trigger_check_file_name_check_char  ; < 'a'
            cmp #$7b
            bcs trigger_check_file_name_check_char  ; > 'z'

            and #$df            ; Convert the char to upper case and store it

            trigger_check_file_name_check_char:
            cmp trigger_offset
            bne trigger_check_file_name_differs
            cmp #0
            beq trigger_check_file_name_matches
            inx
            cpx #11
            bne trigger_check_file_name_loop

        trigger_check_file_name_matches:
        pla
        tax
        jmp trigger_start_decompression

        trigger_check_file_name_differs:
        pla
        tax

        trigger_check_base:
        cpx #0                          ; If not at the base of the array then
        bne trigger_check_loop          ; loop again.
        beq trigger_exit                ; Otherwise exit.

        trigger_check_next:
        dex                             ; Point to the low byte before looping
        bne trigger_check_loop          ; again if not at the base of the array.

    trigger_exit:

    pla         ; Restore X.
    tax
    trigger_check_quick_exit:
    rts

trigger_start_decompression:

    lda src_addresses,x     ; Read the source address into the addresses used
    sta src_low             ; for the source address in the decompression
    inx                     ; routine.
    lda src_addresses,x
    sta src_high
    dex

    lda dest_addresses,x    ; Read the corresponding address into the addresses
    sta dest_low            ; used for the destination and ending addresses.
    inx
    lda dest_addresses,x
    sta dest_high
    dex

    stx trigger_offset      ; The trigger offset is a multiple of 2.

    jsr decompress          ; Call the decompression routine.

    pla                     ; Restore X.
    tax
    rts
