.org $8000
.alias current_paged_rom $f4
.alias current_rom $f5
.alias exported_rom_pointer $f6
.alias exported_rom_pointer_low $f6
.alias exported_rom_pointer_high $f7
.alias OSRDRM $ffb9

.alias rom_pointer $%(rom pointer)x
.alias rom_bank $%(rom bank)x
.alias old_bytev $%(bytev)x
.alias old_argsv $%(argsv)x
.alias tape_workspace $%(tape workspace)x
.alias tape_workspace_call_address $%(tape workspace call address)x
.alias fscheck_workspace $%(fscheck workspace)x
.alias fscheck_workspace_call_address $%(fscheck workspace call address)x

rom_start:
.byte 0, 0, 0   ; null language entry
jmp service_entry

; ROM type
.byte $82       ; 6502 code (2), language ($40), service ($80)

copyright_offset:
.byte [copyright_string - rom_start - 1]

; Version
.byte %(version)i

; Title string
.byte "%(title)s", 0

; Version string
.byte "%(version string)s", 0

copyright_string:
.byte "%(copyright)s", 0

service_entry:

%(service entry command code)s
    cmp #$0d
    beq init_command
    cmp #$0e
    beq read_byte_command
%(service boot code)s
    service_entry_exit:
    rts

rom_name: .byte "MGCROM", 13

init_command:

    pha
    tya
    bmi init_set_pointer
    eor #$0f
    cmp #$10
    bcs exit
    cmp current_paged_rom
    bcc exit

    init_set_pointer:
%(first rom bank check code)s
%(first rom bank behaviour code)s

init_sync_pointers:
    jsr sync_pointers

    lda current_paged_rom
    eor #$ff
    and #$0f
    sta current_rom

claim:
    pla
    lda #0
    rts

exit:
    pla
    rts

read_byte_command:
    pha

    lda current_rom
    eor #$ff
    and #$0f
    cmp current_paged_rom
    bne exit

%(trigger check)s
    read_raw_data:
    ldy #0
    lda (exported_rom_pointer),y
    tay

claim1:
    inc exported_rom_pointer
    bne claim1_sync
    inc [exported_rom_pointer + 1]

    claim1_sync:
    lda exported_rom_pointer
    sta rom_pointer
    lda [exported_rom_pointer + 1]
    sta [rom_pointer + 1]

    jmp claim

service_command:
%(service command code)s

rom_command:

    jsr reset_pointer

%(init romfs code)s
%(call tape init)s
%(call fscheck init)s

    jsr sync_pointers

%(boot code)s

%(tape init)s

%(fscheck init)s

reset_pointer:

%(first rom bank init code)s

    lda #<data
    sta rom_pointer
    lda #>data
    sta [rom_pointer + 1]
    rts

sync_pointers:
    lda rom_pointer
    sta exported_rom_pointer
    lda [rom_pointer + 1]
    sta [exported_rom_pointer + 1]
    rts

; Optionally include code to check for certain ROM addresses and trigger actions.
%(trigger routine)s

; Optionally include code to perform decompression of compressed data.
%(decode code)s

data:
